October 29:

	- design loose outline of project classes...I need:
		- data:
			- bank accounts
				- ID/token
				- status (open, closed, pending)
				- ~type (single, joint) (necessary?) 
				- funds
				- owner(s)
			- user profiles
				- ID/token
				- username, password
				- type (customer, employee, admin) (determines privileges)
				- owned accounts (only for customer)	 
			- transaction record
				- ID/token
				- timestamp
				- type (account open, account close, transfer, 
						deposit, withdrawal, user added/removed to/from account)
				- who (which user triggered it)
				- source account (only for transfer)
				- destination account (only for transfer)
				- transfer amount (only for transfer)	
		- DAO (text first, db later)
			- NOTE: for a bank, I think it makes sense to only read data on demand rather than
				load ALL of the data for one user that isn't allowed to look at them
			- name/identifier (eg filename, or database table-name/address)
			- read() @params: data type, id
			- write() @params: data object (account, profile, transaction)
		- user IO (command line)
			- notify() (print)
			- prompt() -> request (print + get input)
		- request (represents user input/commands)
			- type
			- additional param(s)
		- hub/main/primary/controller/teller/driver (connects everything and actually does the work)
			- currentUser (profile)
			- handleRequest()
			- interactionLoop()
			
	- some thoughts:
		- IDs for accounts, profiles, etc should be unique among each type of data, so I need
			to keep track of how many of each kind exist (or keep a "next ID")...shoudl this
			have its own class? or datatype? 
		- do user profiles need IDs or is the username enough?
	
	- I'm going to start on the data classes first. They are mostly just containers for data. [x]
		- should they inherit from an abstract class and/or implement an interface? How much do  
			they have in common? I guess they could be grouped in a single data structure at some
			point, so they should have some kind of polymorphism. Let's call it BankData [x]
			
	- I'm going to represent money with doubles, but I could make some kind of Money class that
		takes care of formatting, currency form, etc.
		
	- finished the data classes, I'll make a text DAO next. (and the general DAO interface) [ ]
		- I probably need an exception if the DAO runs in to problems
		
	- tomorrow, continue working on TextFileDAO, starting with searchFile(List)
	
October 30:

	- continue working on TextFileDAO [~]
		- writing entries is going to be more complicated than I thought, because it will involve
			reading the file and checking for an old entry to be overwritten (I guess the database
			version wont have this problem)
		- Let's unit test these search methods before moving on [x]
		- oh yeah if I want to test individual helper methods I cant set them to private
		- next time write/test writeMultiple()

November 2:

	- changed money representation to int [x]
	- now writeMultiple() [x] and test it [~]
	
November 3:

	- continue testing writeMultiple [x]
	- now start filling out the actual DAO interface methods that make use of these helpers
		I made [~]
		- I need more helpers
		- time to actually work out a format for transactions, why didn't I do this earlier? Oh right,
			the timestamp. I'm going to change it to a String because that's more flexible [x]
			- format will be "TRR <id> <time> <type> <actingUser> <sourceAcc> <destAcc> <moneyAmount>"
	- I just finished the buildTransaction method, tomorrow work on read
	
November 4:

	- I think I'm spending way too much time on the text DAO...I should be able to re-use some of this, though
	- anyway, on to the reading transactions [x]
	- now do write [x] and test it [x] 
		- oh no I had previously written a different way of doing write...time to fix this [x]
	- almost done with the TextDAO (finally...), I think I need a way to get the highest/next ID [x]
	- what to do next? The controller or the requests? I think request because the controller will need them.
	- What does a request need? Should there be different classes of request, or just a type enum?
		- Let's list the types of request:
			- register user (name, pass)
			- log in (name, pass)
			- apply to open account
			- approve opening an account (accID)
			- deny opening an account (accID)
			- close an account (accID)
			- add an owner to an account (accID, userID)
			- remove an owner from an account (accID, userID)
			- deposit money (accID, $)
			- withdraw money (accID, $)
			- transfer money (sourceAccID, destAccID, $)
		- seeing this, I think I'll just make one Request class. It will have:
			- a RequestType enum for each of the above
			- a List<String> params 
		- individual actions/methods will know how to parse these params and how to determine permissions.
	- okay, write the Request class [ ]